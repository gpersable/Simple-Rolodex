{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","person","name","email","CardList","people","map","id","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","res","json","users","this","filteredPeople","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAGaA,G,YAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAI,SAASC,IAAG,2CAAsCH,EAAMI,OAAOC,KAAnD,8CACjB,6BAAKL,EAAMI,OAAOC,OAClB,4BAAIL,EAAMI,OAAOE,aCHZC,EAAW,SAAAP,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACCD,EAAMQ,OAAOC,KAAI,SAAAL,GAAM,OACpB,cAAC,EAAD,CAAsBA,OAAQA,GAAnBA,EAAOM,UCJbC,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIC,KAAK,SACLF,YAAaA,EACbX,UAAU,SACVc,SAAUF,MCsCHG,G,wDAxCb,aAAe,IAAD,8BACZ,gBAeFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAdtC,EAAKC,MAAQ,CACXd,OAAQ,GACRW,YAAa,IALH,E,gEAUO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,OAAQmB,S,+BAO9B,IAAD,EACyBC,KAAKN,MAA7Bd,EADD,EACCA,OAAQW,EADT,EACSA,YACVU,EAAiBrB,EAAOsB,QAAO,SAAA1B,GAAM,OACvCA,EAAOC,KAAK0B,cAAcC,SAASb,EAAYY,kBAGnD,OACE,sBAAK9B,UAAU,MAAf,UACA,gDACA,cAAC,EAAD,CACEW,YAAY,oBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUL,OAASqB,W,GAlCPI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.42c9995e.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = (props) => (\n    <div className=\"card-container\">\n    <img alt=\"person\" src={`https://ui-avatars.com/api/?name=${props.person.name}&background=random&size=235&rounded=true`} />\n        <h2>{props.person.name}</h2>\n        <p>{props.person.email}</p>\n    </div>\n)\n","import React from 'react';\nimport './card-list.styles.css';\nimport { Card } from '../card/card.component';\n\nexport const CardList = props => (\n    <div className=\"card-list\">\n    {props.people.map(person => (\n        <Card key={person.id} person={person} />\n    ))}\n    </div>\n);","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input \n        type=\"search\" \n        placeholder={placeholder}\n        className=\"search\"\n        onChange={handleChange} \n    />\n)","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      people: [],\n      searchField: \"\"\n    };\n\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(res => res.json())\n    .then(users => this.setState({people: users}));\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  }\n\n  render() {\n    const { people, searchField } = this.state;\n    const filteredPeople = people.filter(person => \n        person.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n\n    return (\n      <div className=\"App\">\n      <h1>People Rolodex</h1> \n      <SearchBox \n        placeholder=\"Search someone...\"\n        handleChange={this.handleChange} \n      />\n      <CardList people={ filteredPeople } />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}